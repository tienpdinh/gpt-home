name: CI

on:
  push:

permissions:
  contents: read
  security-events: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21.x, 1.24.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Verify Go installation
      run: |
        go version
        go env GOROOT
        go env GOPATH
        go env GOMOD

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Setup Go module
      run: |
        go mod tidy
        go mod download
        go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run tests with coverage
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: tienpdinh/gpt-home
        fail_ci_if_error: false

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.go-version }}
        path: |
          coverage.out
          coverage.html

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24.x

    - name: Setup Go module
      run: |
        go mod tidy
        go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Exclude darwin/arm64 for now (M1 Macs)
          - goos: darwin
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24.x

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        go build -a -installsuffix cgo -ldflags '-extldflags "-static"' -o gpt-home-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/main.go

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: gpt-home-${{ matrix.goos }}-${{ matrix.goarch }}
        path: gpt-home-${{ matrix.goos }}-${{ matrix.goarch }}

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24.x

    - name: Setup Go module
      run: |
        go mod tidy
        go mod download

    - name: Install and run Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -no-fail -fmt sarif -out gosec.sarif ./...
      continue-on-error: true

    - name: Upload Gosec results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gosec.sarif

  docker:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: gpt-home:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm gpt-home:latest --help || echo "Expected help output or error"

  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24.x

    - name: Run govulncheck (Go vulnerability scanner)
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
      continue-on-error: true